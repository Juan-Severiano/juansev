/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { GetLinksQueryResponse, GetLinksQueryParams } from '../../types/GetLinks'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getLinksInfiniteQueryKey = (params?: GetLinksQueryParams) => [{ url: '/links' }, ...(params ? [params] : [])] as const

export type GetLinksInfiniteQueryKey = ReturnType<typeof getLinksInfiniteQueryKey>

/**
 * @summary Get all links with pagination
 * {@link /links}
 */
export async function getLinksInfinite(params?: GetLinksQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetLinksQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/links`, params, ...requestConfig })
  return res
}

export function getLinksInfiniteQueryOptions(params?: GetLinksQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getLinksInfiniteQueryKey(params)
  return infiniteQueryOptions<
    ResponseConfig<GetLinksQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetLinksQueryResponse>,
    typeof queryKey,
    number
  >({
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal

      if (params) {
        params['next_page'] = pageParam as unknown as GetLinksQueryParams['next_page']
      }
      return getLinksInfinite(params, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * @summary Get all links with pagination
 * {@link /links}
 */
export function useGetLinksInfinite<
  TData = InfiniteData<ResponseConfig<GetLinksQueryResponse>>,
  TQueryData = ResponseConfig<GetLinksQueryResponse>,
  TQueryKey extends QueryKey = GetLinksInfiniteQueryKey,
>(
  params?: GetLinksQueryParams,
  options: {
    query?: Partial<InfiniteQueryObserverOptions<ResponseConfig<GetLinksQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getLinksInfiniteQueryKey(params)

  const query = useInfiniteQuery(
    {
      ...(getLinksInfiniteQueryOptions(params, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}