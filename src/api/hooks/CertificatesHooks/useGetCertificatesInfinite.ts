/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@kubb/plugin-client/clients/axios";
import type {
  GetCertificatesQueryResponse,
  GetCertificatesQueryParams,
} from "../../types/GetCertificates";
import type {
  RequestConfig,
  ResponseErrorConfig,
  ResponseConfig,
} from "@kubb/plugin-client/clients/axios";
import type {
  InfiniteData,
  QueryKey,
  QueryClient,
  InfiniteQueryObserverOptions,
  UseInfiniteQueryResult,
} from "@tanstack/react-query";
import { infiniteQueryOptions, useInfiniteQuery } from "@tanstack/react-query";

export const getCertificatesInfiniteQueryKey = (
  params?: GetCertificatesQueryParams
) => [{ url: "/certificates" }, ...(params ? [params] : [])] as const;

export type GetCertificatesInfiniteQueryKey = ReturnType<
  typeof getCertificatesInfiniteQueryKey
>;

/**
 * @summary Get all certificates with pagination
 * {@link /certificates}
 */
export async function getCertificatesInfinite(
  params?: GetCertificatesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    GetCertificatesQueryResponse,
    ResponseErrorConfig<Error>,
    unknown
  >({
    method: "GET",
    url: `/certificates`,
    params,
    ...requestConfig,
  });
  return res;
}

export function getCertificatesInfiniteQueryOptions(
  params?: GetCertificatesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {}
) {
  const queryKey = getCertificatesInfiniteQueryKey(params);
  return infiniteQueryOptions<
    ResponseConfig<GetCertificatesQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetCertificatesQueryResponse>,
    typeof queryKey,
    number
  >({
    queryKey,
    queryFn: async ({ signal, pageParam }) => {
      config.signal = signal;

      if (params) {
        // @ts-ignore
        params["next_page"] =
          // @ts-ignore
          pageParam as unknown as GetCertificatesQueryParams["next_page"];
      }
      return getCertificatesInfinite(params, config);
    },
    initialPageParam: 0,
    // @ts-ignore
    getNextPageParam: (lastPage) => lastPage["nextCursor"],
    // @ts-ignore
    getPreviousPageParam: (firstPage) => firstPage["nextCursor"],
  });
}

/**
 * @summary Get all certificates with pagination
 * {@link /certificates}
 */
export function useGetCertificatesInfinite<
  TData = InfiniteData<ResponseConfig<GetCertificatesQueryResponse>>,
  TQueryData = ResponseConfig<GetCertificatesQueryResponse>,
  TQueryKey extends QueryKey = GetCertificatesInfiniteQueryKey,
>(
  params?: GetCertificatesQueryParams,
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<
        ResponseConfig<GetCertificatesQueryResponse>,
        ResponseErrorConfig<Error>,
        TData,
        TQueryKey
      >
    > & {
      client?: QueryClient;
    };
    client?: Partial<RequestConfig> & { client?: typeof client };
  } = {}
) {
  const {
    query: { client: queryClient, ...queryOptions } = {},
    client: config = {},
  } = options ?? {};
  const queryKey =
    queryOptions?.queryKey ?? getCertificatesInfiniteQueryKey(params);

  const query = useInfiniteQuery(
    {
      ...(getCertificatesInfiniteQueryOptions(
        params,
        config
      ) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<
        InfiniteQueryObserverOptions,
        "queryKey"
      >),
    },
    queryClient
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & {
    queryKey: TQueryKey;
  };

  query.queryKey = queryKey as TQueryKey;

  return query;
}
