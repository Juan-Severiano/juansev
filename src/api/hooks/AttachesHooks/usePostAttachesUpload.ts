/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { PostAttachesUploadMutationRequest, PostAttachesUploadMutationResponse } from '../../types/PostAttachesUpload'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const postAttachesUploadMutationKey = () => [{ url: '/attaches/upload' }] as const

export type PostAttachesUploadMutationKey = ReturnType<typeof postAttachesUploadMutationKey>

/**
 * @summary Upload a file
 * {@link /attaches/upload}
 */
export async function postAttachesUpload(
  data?: PostAttachesUploadMutationRequest,
  config: Partial<RequestConfig<PostAttachesUploadMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const formData = new FormData()
  if (data) {
    Object.keys(data).forEach((key) => {
      const value = data[key as keyof typeof data]
      if (typeof key === 'string' && (typeof value === 'string' || (value as Blob) instanceof Blob)) {
        formData.append(key, value as unknown as string)
      }
    })
  }
  const res = await request<PostAttachesUploadMutationResponse, ResponseErrorConfig<Error>, PostAttachesUploadMutationRequest>({
    method: 'POST',
    url: `/attaches/upload`,
    data: formData,
    ...requestConfig,
    headers: { 'Content-Type': 'multipart/form-data', ...requestConfig.headers },
  })
  return res
}

/**
 * @summary Upload a file
 * {@link /attaches/upload}
 */
export function usePostAttachesUpload<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PostAttachesUploadMutationResponse>,
      ResponseErrorConfig<Error>,
      { data?: PostAttachesUploadMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostAttachesUploadMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postAttachesUploadMutationKey()

  return useMutation<ResponseConfig<PostAttachesUploadMutationResponse>, ResponseErrorConfig<Error>, { data?: PostAttachesUploadMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postAttachesUpload(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}