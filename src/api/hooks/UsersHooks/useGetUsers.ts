/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { GetUsersQueryResponse, GetUsersQueryParams } from '../../types/GetUsers'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getUsersQueryKey = (params?: GetUsersQueryParams) => [{ url: '/users' }, ...(params ? [params] : [])] as const

export type GetUsersQueryKey = ReturnType<typeof getUsersQueryKey>

/**
 * @summary Get all users with pagination
 * {@link /users}
 */
export async function getUsers(params?: GetUsersQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetUsersQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/users`, params, ...requestConfig })
  return res
}

export function getUsersQueryOptions(params?: GetUsersQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getUsersQueryKey(params)
  return queryOptions<ResponseConfig<GetUsersQueryResponse>, ResponseErrorConfig<Error>, ResponseConfig<GetUsersQueryResponse>, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getUsers(params, config)
    },
  })
}

/**
 * @summary Get all users with pagination
 * {@link /users}
 */
export function useGetUsers<
  TData = ResponseConfig<GetUsersQueryResponse>,
  TQueryData = ResponseConfig<GetUsersQueryResponse>,
  TQueryKey extends QueryKey = GetUsersQueryKey,
>(
  params?: GetUsersQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<GetUsersQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getUsersQueryKey(params)

  const query = useQuery(
    {
      ...(getUsersQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}