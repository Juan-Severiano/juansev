/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { GetUsersUsernameQueryResponse, GetUsersUsernamePathParams } from '../../types/GetUsersUsernameUsername'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getUsersUsernameUsernameInfiniteQueryKey = (username: GetUsersUsernamePathParams['username']) =>
  [{ url: '/users/username/:username', params: { username: username } }] as const

export type GetUsersUsernameUsernameInfiniteQueryKey = ReturnType<typeof getUsersUsernameUsernameInfiniteQueryKey>

/**
 * @summary Get a user by username
 * {@link /users/username/:username}
 */
export async function getUsersUsernameUsernameInfinite(
  username: GetUsersUsernamePathParams['username'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetUsersUsernameQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/users/username/${username}`,
    ...requestConfig,
  })
  return res
}

export function getUsersUsernameUsernameInfiniteQueryOptions(
  username: GetUsersUsernamePathParams['username'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getUsersUsernameUsernameInfiniteQueryKey(username)
  return infiniteQueryOptions<
    ResponseConfig<GetUsersUsernameQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetUsersUsernameQueryResponse>,
    typeof queryKey
  >({
    enabled: !!username,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getUsersUsernameUsernameInfinite(username, config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * @summary Get a user by username
 * {@link /users/username/:username}
 */
export function useGetUsersUsernameUsernameInfinite<
  TData = InfiniteData<ResponseConfig<GetUsersUsernameQueryResponse>>,
  TQueryData = ResponseConfig<GetUsersUsernameQueryResponse>,
  TQueryKey extends QueryKey = GetUsersUsernameUsernameInfiniteQueryKey,
>(
  username: GetUsersUsernamePathParams['username'],
  options: {
    query?: Partial<InfiniteQueryObserverOptions<ResponseConfig<GetUsersUsernameQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getUsersUsernameUsernameInfiniteQueryKey(username)

  const query = useInfiniteQuery(
    {
      ...(getUsersUsernameUsernameInfiniteQueryOptions(username, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}