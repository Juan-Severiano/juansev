/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { PostUsersMutationRequest, PostUsersMutationResponse } from '../../types/PostUsers'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const postUsersMutationKey = () => [{ url: '/users' }] as const

export type PostUsersMutationKey = ReturnType<typeof postUsersMutationKey>

/**
 * @summary Create a new user
 * {@link /users}
 */
export async function postUsers(data: PostUsersMutationRequest, config: Partial<RequestConfig<PostUsersMutationRequest>> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PostUsersMutationResponse, ResponseErrorConfig<Error>, PostUsersMutationRequest>({
    method: 'POST',
    url: `/users`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Create a new user
 * {@link /users}
 */
export function usePostUsers<TContext>(
  options: {
    mutation?: UseMutationOptions<ResponseConfig<PostUsersMutationResponse>, ResponseErrorConfig<Error>, { data: PostUsersMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<PostUsersMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postUsersMutationKey()

  return useMutation<ResponseConfig<PostUsersMutationResponse>, ResponseErrorConfig<Error>, { data: PostUsersMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postUsers(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}