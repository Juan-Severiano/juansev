/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { PostOwnersMutationRequest, PostOwnersMutationResponse } from '../../types/PostOwners'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const postOwnersMutationKey = () => [{ url: '/owners' }] as const

export type PostOwnersMutationKey = ReturnType<typeof postOwnersMutationKey>

/**
 * @summary Create a new owner
 * {@link /owners}
 */
export async function postOwners(data: PostOwnersMutationRequest, config: Partial<RequestConfig<PostOwnersMutationRequest>> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PostOwnersMutationResponse, ResponseErrorConfig<Error>, PostOwnersMutationRequest>({
    method: 'POST',
    url: `/owners`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Create a new owner
 * {@link /owners}
 */
export function usePostOwners<TContext>(
  options: {
    mutation?: UseMutationOptions<ResponseConfig<PostOwnersMutationResponse>, ResponseErrorConfig<Error>, { data: PostOwnersMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<PostOwnersMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postOwnersMutationKey()

  return useMutation<ResponseConfig<PostOwnersMutationResponse>, ResponseErrorConfig<Error>, { data: PostOwnersMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postOwners(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}