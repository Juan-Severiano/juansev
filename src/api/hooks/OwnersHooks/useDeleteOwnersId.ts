/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { DeleteOwnersIdMutationResponse, DeleteOwnersIdPathParams } from '../../types/DeleteOwnersId'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const deleteOwnersIdMutationKey = () => [{ url: '/owners/{id}' }] as const

export type DeleteOwnersIdMutationKey = ReturnType<typeof deleteOwnersIdMutationKey>

/**
 * @summary Delete an owner
 * {@link /owners/:id}
 */
export async function deleteOwnersId(id: DeleteOwnersIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<DeleteOwnersIdMutationResponse, ResponseErrorConfig<Error>, unknown>({ method: 'DELETE', url: `/owners/${id}`, ...requestConfig })
  return res
}

/**
 * @summary Delete an owner
 * {@link /owners/:id}
 */
export function useDeleteOwnersId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<DeleteOwnersIdMutationResponse>,
      ResponseErrorConfig<Error>,
      { id: DeleteOwnersIdPathParams['id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteOwnersIdMutationKey()

  return useMutation<ResponseConfig<DeleteOwnersIdMutationResponse>, ResponseErrorConfig<Error>, { id: DeleteOwnersIdPathParams['id'] }, TContext>(
    {
      mutationFn: async ({ id }) => {
        return deleteOwnersId(id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}