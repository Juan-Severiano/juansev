/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { PostCertificatesMutationRequest, PostCertificatesMutationResponse } from '../../types/PostCertificates.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const postCertificatesMutationKey = () => [{ url: '/certificates' }] as const

export type PostCertificatesMutationKey = ReturnType<typeof postCertificatesMutationKey>

/**
 * @summary Criar certificado
 * {@link /certificates}
 */
export async function postCertificates(
  data: PostCertificatesMutationRequest,
  config: Partial<RequestConfig<PostCertificatesMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PostCertificatesMutationResponse, ResponseErrorConfig<Error>, PostCertificatesMutationRequest>({
    method: 'POST',
    url: `/certificates`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Criar certificado
 * {@link /certificates}
 */
export function usePostCertificates<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PostCertificatesMutationResponse>,
      ResponseErrorConfig<Error>,
      { data: PostCertificatesMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostCertificatesMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postCertificatesMutationKey()

  return useMutation<ResponseConfig<PostCertificatesMutationResponse>, ResponseErrorConfig<Error>, { data: PostCertificatesMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postCertificates(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}