/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { GetProjectSlugQueryResponse, GetProjectSlugPathParams } from '../../types/GetProjectSlugSlug.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getProjectSlugSlugQueryKey = (slug: GetProjectSlugPathParams['slug']) => [{ url: '/project/slug/:slug', params: { slug: slug } }] as const

export type GetProjectSlugSlugQueryKey = ReturnType<typeof getProjectSlugSlugQueryKey>

/**
 * @summary Buscar projeto por slug
 * {@link /project/slug/:slug}
 */
export async function getProjectSlugSlug(slug: GetProjectSlugPathParams['slug'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetProjectSlugQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/project/slug/${slug}`, ...requestConfig })
  return res
}

export function getProjectSlugSlugQueryOptions(slug: GetProjectSlugPathParams['slug'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getProjectSlugSlugQueryKey(slug)
  return queryOptions<ResponseConfig<GetProjectSlugQueryResponse>, ResponseErrorConfig<Error>, ResponseConfig<GetProjectSlugQueryResponse>, typeof queryKey>({
    enabled: !!slug,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getProjectSlugSlug(slug, config)
    },
  })
}

/**
 * @summary Buscar projeto por slug
 * {@link /project/slug/:slug}
 */
export function useGetProjectSlugSlug<
  TData = ResponseConfig<GetProjectSlugQueryResponse>,
  TQueryData = ResponseConfig<GetProjectSlugQueryResponse>,
  TQueryKey extends QueryKey = GetProjectSlugSlugQueryKey,
>(
  slug: GetProjectSlugPathParams['slug'],
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<GetProjectSlugQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getProjectSlugSlugQueryKey(slug)

  const query = useQuery(
    {
      ...(getProjectSlugSlugQueryOptions(slug, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}