/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { PostAuthLoginMutationRequest, PostAuthLoginMutationResponse } from '../../types/PostAuthLogin.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const postAuthLoginMutationKey = () => [{ url: '/auth/login' }] as const

export type PostAuthLoginMutationKey = ReturnType<typeof postAuthLoginMutationKey>

/**
 * @summary Login
 * {@link /auth/login}
 */
export async function postAuthLogin(
  data: PostAuthLoginMutationRequest,
  config: Partial<RequestConfig<PostAuthLoginMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PostAuthLoginMutationResponse, ResponseErrorConfig<Error>, PostAuthLoginMutationRequest>({
    method: 'POST',
    url: `/auth/login`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Login
 * {@link /auth/login}
 */
export function usePostAuthLogin<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PostAuthLoginMutationResponse>,
      ResponseErrorConfig<Error>,
      { data: PostAuthLoginMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostAuthLoginMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postAuthLoginMutationKey()

  return useMutation<ResponseConfig<PostAuthLoginMutationResponse>, ResponseErrorConfig<Error>, { data: PostAuthLoginMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postAuthLogin(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}