/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { PostUserMutationRequest, PostUserMutationResponse } from '../../types/PostUser.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'

export const postUserMutationKey = () => [{ url: '/user' }] as const

export type PostUserMutationKey = ReturnType<typeof postUserMutationKey>

/**
 * @summary Criar usuário
 * {@link /user}
 */
export async function postUser(data: PostUserMutationRequest, config: Partial<RequestConfig<PostUserMutationRequest>> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PostUserMutationResponse, ResponseErrorConfig<Error>, PostUserMutationRequest>({
    method: 'POST',
    url: `/user`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * @summary Criar usuário
 * {@link /user}
 */
export function usePostUser<TContext>(
  options: {
    mutation?: UseMutationOptions<ResponseConfig<PostUserMutationResponse>, ResponseErrorConfig<Error>, { data: PostUserMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<PostUserMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postUserMutationKey()

  return useMutation<ResponseConfig<PostUserMutationResponse>, ResponseErrorConfig<Error>, { data: PostUserMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postUser(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}