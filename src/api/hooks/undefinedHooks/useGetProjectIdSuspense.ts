/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { GetProjectIdQueryResponse, GetProjectIdPathParams } from '../../types/GetProjectId.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getProjectIdSuspenseQueryKey = (id: GetProjectIdPathParams['id']) => [{ url: '/project/:id', params: { id: id } }] as const

export type GetProjectIdSuspenseQueryKey = ReturnType<typeof getProjectIdSuspenseQueryKey>

/**
 * @summary Buscar projeto por ID
 * {@link /project/:id}
 */
export async function getProjectIdSuspense(id: GetProjectIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetProjectIdQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/project/${id}`, ...requestConfig })
  return res
}

export function getProjectIdSuspenseQueryOptions(id: GetProjectIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getProjectIdSuspenseQueryKey(id)
  return queryOptions<ResponseConfig<GetProjectIdQueryResponse>, ResponseErrorConfig<Error>, ResponseConfig<GetProjectIdQueryResponse>, typeof queryKey>({
    enabled: !!id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getProjectIdSuspense(id, config)
    },
  })
}

/**
 * @summary Buscar projeto por ID
 * {@link /project/:id}
 */
export function useGetProjectIdSuspense<TData = ResponseConfig<GetProjectIdQueryResponse>, TQueryKey extends QueryKey = GetProjectIdSuspenseQueryKey>(
  id: GetProjectIdPathParams['id'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<ResponseConfig<GetProjectIdQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getProjectIdSuspenseQueryKey(id)

  const query = useSuspenseQuery(
    {
      ...(getProjectIdSuspenseQueryOptions(id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}