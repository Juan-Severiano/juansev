/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { GetAuthMeQueryResponse } from '../../types/GetAuthMe.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getAuthMeSuspenseQueryKey = () => [{ url: '/auth/me' }] as const

export type GetAuthMeSuspenseQueryKey = ReturnType<typeof getAuthMeSuspenseQueryKey>

/**
 * @summary Buscar usuário autenticado
 * {@link /auth/me}
 */
export async function getAuthMeSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetAuthMeQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/auth/me`, ...requestConfig })
  return res
}

export function getAuthMeSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getAuthMeSuspenseQueryKey()
  return queryOptions<ResponseConfig<GetAuthMeQueryResponse>, ResponseErrorConfig<Error>, ResponseConfig<GetAuthMeQueryResponse>, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getAuthMeSuspense(config)
    },
  })
}

/**
 * @summary Buscar usuário autenticado
 * {@link /auth/me}
 */
export function useGetAuthMeSuspense<TData = ResponseConfig<GetAuthMeQueryResponse>, TQueryKey extends QueryKey = GetAuthMeSuspenseQueryKey>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<ResponseConfig<GetAuthMeQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getAuthMeSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(getAuthMeSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}